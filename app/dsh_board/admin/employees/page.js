"use client";
import { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";

export default function EmployeesPage() {
  const [form, setForm] = useState({
    name: "",
    mobile: "",
    email: "",
    designation: "CHAIRMAN",
    order: "",
    notes: "",
    imageUrl: "",   // <-- ImageBB URL рж░рж╛ржЦрж╛рж░ ржЬржирзНржп ржирждрзБржи ржлрж┐рж▓рзНржб
  });
  const [employees, setEmployees] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [imageFile, setImageFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [uploading, setUploading] = useState(false);

  const fetchEmployees = async () => {
    const res = await fetch("/api/employees");
    const data = await res.json();
    if (data.success) setEmployees(data.employees);
    else toast.error("рждржерзНржп рж▓рзЛржб ржХрж░рждрзЗ ржмрзНржпрж░рзНрже");
  };

  useEffect(() => {
    fetchEmployees();
  }, []);

  // ржЫржмрж┐ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж▓рзЗ preview set рж╣ржмрзЗ
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    setImageFile(file);

    const reader = new FileReader();
    reader.onloadend = () => setPreview(reader.result);
    reader.readAsDataURL(file);
  };

  // ImageBB API рждрзЗ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзЗ URL ржлрзЗрж░ржд ржирзЗрзЯ
  const uploadImage = async () => {
    if (!imageFile) return null;

    setUploading(true);
    const formData = new FormData();
    formData.append("image", imageFile);

    try {
      const res = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });
      const data = await res.json();
      if (res.ok) {
        setUploading(false);
        return data.url; // ImageBB ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ URL
      } else {
        setUploading(false);
        toast.error("ржЫржмрж┐ ржЖржкрж▓рзЛржб ржмрзНржпрж░рзНрже: " + data.message);
        return null;
      }
    } catch (err) {
      setUploading(false);
      toast.error("ржЫржмрж┐ ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛");
      return null;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // ржпржжрж┐ ржЫржмрж┐ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж╛ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржЖржкрж▓рзЛржб ржХрж░рзЗ URL ржирж┐ржи
    let imageUrl = form.imageUrl;
    if (imageFile) {
      const uploadedUrl = await uploadImage();
      if (!uploadedUrl) return; // ржпржжрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржмрзНржпрж░рзНрже рж╣рзЯ, рж╕рж╛ржмржорж┐ржЯ ржмржирзНржз ржХрж░ржмрзЗ
      imageUrl = uploadedUrl;
    }

    const method = editingId ? "PATCH" : "POST";
    const url = editingId ? `/api/employees?id=${editingId}` : "/api/employees";

    try {
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...form, imageUrl }),
      });
      const data = await res.json();

      if (data.success) {
        toast.success(editingId ? "ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗ" : "рж╕ржВрж░ржХрзНрж╖рж┐ржд");
        setForm({
          name: "",
          mobile: "",
          email: "",
          designation: "CHAIRMAN",
          order: "",
          notes: "",
          imageUrl: "",
        });
        setEditingId(null);
        setImageFile(null);
        setPreview(null);
        fetchEmployees();
      } else toast.error("ржмрзНржпрж░рзНрже");
    } catch {
      toast.error("ржПрж░рж░ рж╣рзЯрзЗржЫрзЗ");
    }
  };

  const handleDelete = async (id) => {
    if (!confirm("ржЖржкржирж┐ ржХрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи?")) return;
    const res = await fetch(`/api/employees?id=${id}`, { method: "DELETE" });
    const data = await res.json();
    if (data.success) {
      toast.success("ржбрж┐рж▓рж┐ржЯ рж╣рзЯрзЗржЫрзЗ");
      fetchEmployees();
    }
  };

  const handleEdit = (emp) => {
    setForm({
      name: emp.name,
      mobile: emp.mobile || "",
      email: emp.email || "",
      designation: emp.designation,
      order: emp.order || "",
      notes: emp.notes || "",
      imageUrl: emp.imageUrl || "",
    });
    setEditingId(emp.id);
    setPreview(emp.imageUrl || null);
    setImageFile(null);
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
     <form
  onSubmit={handleSubmit}
  className="bg-gradient-to-br from-white via-green-50 to-green-100 p-8 rounded-2xl shadow-2xl border border-green-200 mb-8 transition-all duration-300 hover:shadow-green-200/50"
>
  <h2 className="text-3xl font-extrabold mb-6 text-green-800 drop-shadow-md">
    {editingId ? "тЬПя╕П ржЖржкржбрзЗржЯ ржХрж░рзНржоржХрж░рзНрждрж╛" : "ЁЯУЭ ржирждрзБржи ржХрж░рзНржоржХрж░рзНрждрж╛ ржпрзЛржЧ ржХрж░рзБржи"}
  </h2>

  {/* ржирж╛ржо */}
  <label className="block mb-1 font-medium text-green-700">ржирж╛ржо<span className="text-red-600 text-xl ">*</span></label>
  <input
    type="text"
    value={form.name}
    onChange={(e) => setForm({ ...form, name: e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
    required
  />

  {/* ржорзЛржмрж╛ржЗрж▓ */}
  <label className="block mb-1 font-medium text-green-700">ржорзЛржмрж╛ржЗрж▓<span className="text-red-600 text-xl ">*</span></label>
  <input
    type="text"
    value={form.mobile}
    onChange={(e) => setForm({ ...form, mobile: e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
  />

  {/* ржЗржорзЗржЗрж▓ */}
  <label className="block mb-1 font-medium text-green-700">ржЗржорзЗржЗрж▓</label>
  <input
    type="email"
    value={form.email}
    onChange={(e) => setForm({ ...form, email: e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
  />

  {/* ржкржжржмрж┐ */}
  <label className="block mb-1 font-medium text-green-700">ржкржжржмрж┐<span className="text-red-600 text-xl ">*</span></label>
  <select
    value={form.designation}
    onChange={(e) => setForm({ ...form, designation: e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
  >
    <option value="OFFICER_IN_CHARGE">ржкрзНрж░рж╢рж╛рж╕ржХ</option>
    <option value="CHAIRMAN">ржЪрзЗрзЯрж╛рж░ржорзНржпрж╛ржи</option>
    <option value="ADMINISTRATIVE_OFFICER">ржкрзНрж░рж╢рж╛рж╕ржирж┐ржХ ржХрж░рзНржоржХрж░рзНрждрж╛</option>
    <option value="ACCOUNTANT_COMPUTER_OPERATOR">
      рж╣рж┐рж╕рж╛ржм рж╕рж╣ржХрж╛рж░рзА ржХрж╛ржо ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЕржкрж╛рж░рзЗржЯрж░
    </option>
    <option value="UP_MEMBER">ржорзЗржорзНржмрж╛рж░</option>
    <option value="GRAM_POLICE">ржЧрзНрж░рж╛ржо ржкрзБрж▓рж┐рж╢</option>
    <option value="OTHERS">ржЕржирзНржпрж╛ржирзНржп</option>
  </select>

  {/* ржХрзНрж░ржо */}
  <label className="block mb-1 font-medium text-green-700">ржХрзНрж░ржо<span className="text-red-600 text-xl ">*</span></label>
  <input
    type="number"
    value={form.order}
    onChange={(e) => setForm({ ...form, order: +e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
  />

  {/* ржирзЛржЯрж╕ */}
  <label className="block mb-1 font-medium text-green-700">ржирзЛржЯрж╕</label>
  <textarea
    value={form.notes}
    onChange={(e) => setForm({ ...form, notes: e.target.value })}
    className="w-full p-3 mb-4 border border-green-200 rounded-xl h-28 focus:ring-2 focus:ring-green-400 focus:outline-none shadow-sm transition-all duration-200"
  ></textarea>

  {/* ржЫржмрж┐ ржЖржкрж▓рзЛржб */}
  <label className="block mb-1 font-medium text-green-700">ржЫржмрж┐ ржЖржкрж▓рзЛржб</label>
  <input
    type="file"
    accept="image/*"
    onChange={handleImageChange}
    className="block w-full text-sm text-gray-700 
               file:mr-4 file:py-2 file:px-4 
               file:rounded-lg file:border-0
               file:text-sm file:font-semibold
               file:bg-green-600 file:text-white
               hover:file:bg-green-700 
               cursor-pointer transition-all duration-300 mb-4"
  />

  {preview && (
    <img
      src={preview}
      alt="Preview"
      className="mb-4 max-h-40 rounded-xl border object-contain shadow-sm"
    />
  )}

  {/* Submit Button */}
  <button
    type="submit"
    disabled={uploading}
    className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white py-3 rounded-xl font-semibold shadow-lg hover:shadow-green-300 transition-all duration-300 disabled:opacity-50"
  >
    {uploading
      ? "тП│ ржЫржмрж┐ ржЖржкрж▓рзЛржб рж╣ржЪрзНржЫрзЗ..."
      : editingId
      ? "тЬЕ ржЖржкржбрзЗржЯ"
      : "тЬЕ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи"}
  </button>
</form>


      <div className="bg-white border p-4 rounded-xl shadow">
        <h2 className="text-xl font-semibold mb-3">ЁЯУЛ ржХрж░рзНржоржХрж░рзНрждрж╛рж░ рждрж╛рж▓рж┐ржХрж╛</h2>
        <table className="w-full text-sm border">
          <thead className="bg-green-100">
            <tr>
               
              <th className="border p-2">ржирж╛ржо</th>
              <th className="border p-2">ржкржжржмрж┐</th>
              <th className="border p-2">ржорзЛржмрж╛ржЗрж▓</th>
              <th className="border p-2">ржЗржорзЗржЗрж▓</th>
              <th className="border p-2">ржХрзНрж░ржо</th>
              <th className="border p-2">ржЕрзНржпрж╛ржХрж╢ржи</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp) => (
              <tr key={emp.id}>
                 
                <td className="border p-2">{emp.name}</td>

                <td className="border p-2">
                  {emp.designation === "OFFICER_IN_CHARGE" ? "ржкрзНрж░рж╢рж╛рж╕ржХ" : ""}
                  {emp.designation === "ADMINISTRATIVE_OFFICER"
                    ? "ржЗржЙржкрж┐ ржкрзНрж░рж╢рж╛рж╕ржирж┐ржХ ржХрж░рзНржоржХрж░рзНрждрж╛"
                    : ""}
                  {emp.designation === "ACCOUNTANT_COMPUTER_OPERATOR"
                    ? "рж╣рж┐рж╕рж╛ржм рж╕рж╣ржХрж╛рж░рзА ржХрж╛ржо ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржЕржкрж╛рж░рзЗржЯрж░"
                    : ""}
                  {emp.designation === "UP_MEMBER" ? "рж╕ржжрж╕рзНржп" : ""}
                  {emp.designation === "GRAM_POLICE" ? "ржЧрзНрж░рж╛ржо ржкрзБрж▓рж┐рж╢" : ""}
                  {emp.designation === "OTHERS" ? "ржЕржирзНржпрж╛ржирзНржп" : ""}
                </td>
                <td className="border p-2">{emp.mobile || "-"}</td>
                <td className="border p-2">{emp.email || "-"}</td>
                <td className="border p-2">{emp.order || "-"}</td>
                <td className="border p-2">
                  <button
                    onClick={() => handleEdit(emp)}
                    className="text-blue-600 mr-2"
                  >
                    тЬПя╕П
                  </button>
                  <button
                    onClick={() => handleDelete(emp.id)}
                    className="text-red-600"
                  >
                    ЁЯЧС
                  </button>
                </td>
              </tr>
            ))}
            {employees.length === 0 && (
              <tr>
                <td colSpan={7} className="text-center p-4">
                  ржХрзЛржирзЛ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <ToastContainer position="top-center" autoClose={3000} />
    </div>
  );
}
